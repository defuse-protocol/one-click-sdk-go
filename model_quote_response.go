/*
1Click Swap API

API for One-Click Swaps

API version: 0.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oneclick

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the QuoteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteResponse{}

// QuoteResponse struct for QuoteResponse
type QuoteResponse struct {
	// Timestamp in ISO format that took part in the deposit address derivation
	Timestamp time.Time `json:"timestamp"`
	// Signature of the 1Click service confirming the quote for the specific deposit address. Must be saved on the client side (along with the whole quote) in order to resolve any disputes or mistakes.
	Signature string `json:"signature"`
	// User request
	QuoteRequest QuoteRequest `json:"quoteRequest"`
	// Response that contains the deposit address to send \"amount\" of `originAsset` and possible output amount.
	Quote Quote `json:"quote"`
}

type _QuoteResponse QuoteResponse

// NewQuoteResponse instantiates a new QuoteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteResponse(timestamp time.Time, signature string, quoteRequest QuoteRequest, quote Quote) *QuoteResponse {
	this := QuoteResponse{}
	this.Timestamp = timestamp
	this.Signature = signature
	this.QuoteRequest = quoteRequest
	this.Quote = quote
	return &this
}

// NewQuoteResponseWithDefaults instantiates a new QuoteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteResponseWithDefaults() *QuoteResponse {
	this := QuoteResponse{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *QuoteResponse) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *QuoteResponse) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *QuoteResponse) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSignature returns the Signature field value
func (o *QuoteResponse) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *QuoteResponse) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *QuoteResponse) SetSignature(v string) {
	o.Signature = v
}

// GetQuoteRequest returns the QuoteRequest field value
func (o *QuoteResponse) GetQuoteRequest() QuoteRequest {
	if o == nil {
		var ret QuoteRequest
		return ret
	}

	return o.QuoteRequest
}

// GetQuoteRequestOk returns a tuple with the QuoteRequest field value
// and a boolean to check if the value has been set.
func (o *QuoteResponse) GetQuoteRequestOk() (*QuoteRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteRequest, true
}

// SetQuoteRequest sets field value
func (o *QuoteResponse) SetQuoteRequest(v QuoteRequest) {
	o.QuoteRequest = v
}

// GetQuote returns the Quote field value
func (o *QuoteResponse) GetQuote() Quote {
	if o == nil {
		var ret Quote
		return ret
	}

	return o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value
// and a boolean to check if the value has been set.
func (o *QuoteResponse) GetQuoteOk() (*Quote, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quote, true
}

// SetQuote sets field value
func (o *QuoteResponse) SetQuote(v Quote) {
	o.Quote = v
}

func (o QuoteResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["signature"] = o.Signature
	toSerialize["quoteRequest"] = o.QuoteRequest
	toSerialize["quote"] = o.Quote
	return toSerialize, nil
}

func (o *QuoteResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"signature",
		"quoteRequest",
		"quote",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteResponse := _QuoteResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuoteResponse)

	if err != nil {
		return err
	}

	*o = QuoteResponse(varQuoteResponse)

	return err
}

type NullableQuoteResponse struct {
	value *QuoteResponse
	isSet bool
}

func (v NullableQuoteResponse) Get() *QuoteResponse {
	return v.value
}

func (v *NullableQuoteResponse) Set(val *QuoteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteResponse(val *QuoteResponse) *NullableQuoteResponse {
	return &NullableQuoteResponse{value: val, isSet: true}
}

func (v NullableQuoteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
