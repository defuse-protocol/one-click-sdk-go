/*
1Click Swap API

API for One-Click Swaps

API version: 0.1.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oneclick

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionDetails{}

// TransactionDetails struct for TransactionDetails
type TransactionDetails struct {
	// Transaction hash
	Hash string `json:"hash"`
	// Explorer URL for the transaction
	ExplorerUrl string `json:"explorerUrl"`
}

type _TransactionDetails TransactionDetails

// NewTransactionDetails instantiates a new TransactionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionDetails(hash string, explorerUrl string) *TransactionDetails {
	this := TransactionDetails{}
	this.Hash = hash
	this.ExplorerUrl = explorerUrl
	return &this
}

// NewTransactionDetailsWithDefaults instantiates a new TransactionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDetailsWithDefaults() *TransactionDetails {
	this := TransactionDetails{}
	return &this
}

// GetHash returns the Hash field value
func (o *TransactionDetails) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *TransactionDetails) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *TransactionDetails) SetHash(v string) {
	o.Hash = v
}

// GetExplorerUrl returns the ExplorerUrl field value
func (o *TransactionDetails) GetExplorerUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplorerUrl
}

// GetExplorerUrlOk returns a tuple with the ExplorerUrl field value
// and a boolean to check if the value has been set.
func (o *TransactionDetails) GetExplorerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplorerUrl, true
}

// SetExplorerUrl sets field value
func (o *TransactionDetails) SetExplorerUrl(v string) {
	o.ExplorerUrl = v
}

func (o TransactionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["explorerUrl"] = o.ExplorerUrl
	return toSerialize, nil
}

func (o *TransactionDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
		"explorerUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionDetails := _TransactionDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionDetails)

	if err != nil {
		return err
	}

	*o = TransactionDetails(varTransactionDetails)

	return err
}

type NullableTransactionDetails struct {
	value *TransactionDetails
	isSet bool
}

func (v NullableTransactionDetails) Get() *TransactionDetails {
	return v.value
}

func (v *NullableTransactionDetails) Set(val *TransactionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDetails(val *TransactionDetails) *NullableTransactionDetails {
	return &NullableTransactionDetails{value: val, isSet: true}
}

func (v NullableTransactionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
