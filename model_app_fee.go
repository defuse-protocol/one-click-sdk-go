/*
1Click Swap API

API for One-Click Swaps

API version: 0.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oneclick

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppFee{}

// AppFee struct for AppFee
type AppFee struct {
	// Intents Account ID where this fee will be transferred to
	Recipient string `json:"recipient"`
	// Fee for this recipient as part of amountIn in basis points (1/100th of a percent), e.g. 100 for 1% fee
	Fee float32 `json:"fee"`
}

type _AppFee AppFee

// NewAppFee instantiates a new AppFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppFee(recipient string, fee float32) *AppFee {
	this := AppFee{}
	this.Recipient = recipient
	this.Fee = fee
	return &this
}

// NewAppFeeWithDefaults instantiates a new AppFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppFeeWithDefaults() *AppFee {
	this := AppFee{}
	return &this
}

// GetRecipient returns the Recipient field value
func (o *AppFee) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *AppFee) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *AppFee) SetRecipient(v string) {
	o.Recipient = v
}

// GetFee returns the Fee field value
func (o *AppFee) GetFee() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *AppFee) GetFeeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *AppFee) SetFee(v float32) {
	o.Fee = v
}

func (o AppFee) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recipient"] = o.Recipient
	toSerialize["fee"] = o.Fee
	return toSerialize, nil
}

func (o *AppFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recipient",
		"fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppFee := _AppFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppFee)

	if err != nil {
		return err
	}

	*o = AppFee(varAppFee)

	return err
}

type NullableAppFee struct {
	value *AppFee
	isSet bool
}

func (v NullableAppFee) Get() *AppFee {
	return v.value
}

func (v *NullableAppFee) Set(val *AppFee) {
	v.value = val
	v.isSet = true
}

func (v NullableAppFee) IsSet() bool {
	return v.isSet
}

func (v *NullableAppFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppFee(val *AppFee) *NullableAppFee {
	return &NullableAppFee{value: val, isSet: true}
}

func (v NullableAppFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
