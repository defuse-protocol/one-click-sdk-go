/*
1Click Swap API

API for One-Click Swaps

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oneclick

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SwapDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapDetails{}

// SwapDetails struct for SwapDetails
type SwapDetails struct {
	// All intent hashes that took part in this swap
	IntentHashes []string `json:"intentHashes"`
	// All Near transactions executed for this swap
	NearTxHashes []string `json:"nearTxHashes"`
	// Exact amount of **originToken** after trade was settled
	AmountIn *string `json:"amountIn,omitempty"`
	// Exact amount of **originToken** after trade was settled in readable format
	AmountInFormatted *string `json:"amountInFormatted,omitempty"`
	// Exact amount of **originToken** equivalent in USD
	AmountInUsd *string `json:"amountInUsd,omitempty"`
	// Exact amount of **destinationToken** after trade was settled
	AmountOut *string `json:"amountOut,omitempty"`
	// Exact amount of **destinationToken** in readable format
	AmountOutFormatted *string `json:"amountOutFormatted,omitempty"`
	// Exact amount of **destinationToken** equivalent in USD
	AmountOutUsd *string `json:"amountOutUsd,omitempty"`
	// Actual slippage
	Slippage *float32 `json:"slippage,omitempty"`
	// Hashes and explorer URLs for all transactions on origin chain
	OriginChainTxHashes []TransactionDetails `json:"originChainTxHashes"`
	// Hashes and explorer URLs for all transactions on destination chain
	DestinationChainTxHashes []TransactionDetails `json:"destinationChainTxHashes"`
	// Amount of **originAsset** that got transferred to **refundTo**
	RefundedAmount *string `json:"refundedAmount,omitempty"`
	// Refunded amount in readable format
	RefundedAmountFormatted *string `json:"refundedAmountFormatted,omitempty"`
	// Refunded amount equivalent in USD
	RefundedAmountUsd *string `json:"refundedAmountUsd,omitempty"`
}

type _SwapDetails SwapDetails

// NewSwapDetails instantiates a new SwapDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapDetails(intentHashes []string, nearTxHashes []string, originChainTxHashes []TransactionDetails, destinationChainTxHashes []TransactionDetails) *SwapDetails {
	this := SwapDetails{}
	this.IntentHashes = intentHashes
	this.NearTxHashes = nearTxHashes
	this.OriginChainTxHashes = originChainTxHashes
	this.DestinationChainTxHashes = destinationChainTxHashes
	return &this
}

// NewSwapDetailsWithDefaults instantiates a new SwapDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapDetailsWithDefaults() *SwapDetails {
	this := SwapDetails{}
	return &this
}

// GetIntentHashes returns the IntentHashes field value
func (o *SwapDetails) GetIntentHashes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IntentHashes
}

// GetIntentHashesOk returns a tuple with the IntentHashes field value
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetIntentHashesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntentHashes, true
}

// SetIntentHashes sets field value
func (o *SwapDetails) SetIntentHashes(v []string) {
	o.IntentHashes = v
}

// GetNearTxHashes returns the NearTxHashes field value
func (o *SwapDetails) GetNearTxHashes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NearTxHashes
}

// GetNearTxHashesOk returns a tuple with the NearTxHashes field value
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetNearTxHashesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NearTxHashes, true
}

// SetNearTxHashes sets field value
func (o *SwapDetails) SetNearTxHashes(v []string) {
	o.NearTxHashes = v
}

// GetAmountIn returns the AmountIn field value if set, zero value otherwise.
func (o *SwapDetails) GetAmountIn() string {
	if o == nil || IsNil(o.AmountIn) {
		var ret string
		return ret
	}
	return *o.AmountIn
}

// GetAmountInOk returns a tuple with the AmountIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetAmountInOk() (*string, bool) {
	if o == nil || IsNil(o.AmountIn) {
		return nil, false
	}
	return o.AmountIn, true
}

// HasAmountIn returns a boolean if a field has been set.
func (o *SwapDetails) HasAmountIn() bool {
	if o != nil && !IsNil(o.AmountIn) {
		return true
	}

	return false
}

// SetAmountIn gets a reference to the given string and assigns it to the AmountIn field.
func (o *SwapDetails) SetAmountIn(v string) {
	o.AmountIn = &v
}

// GetAmountInFormatted returns the AmountInFormatted field value if set, zero value otherwise.
func (o *SwapDetails) GetAmountInFormatted() string {
	if o == nil || IsNil(o.AmountInFormatted) {
		var ret string
		return ret
	}
	return *o.AmountInFormatted
}

// GetAmountInFormattedOk returns a tuple with the AmountInFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetAmountInFormattedOk() (*string, bool) {
	if o == nil || IsNil(o.AmountInFormatted) {
		return nil, false
	}
	return o.AmountInFormatted, true
}

// HasAmountInFormatted returns a boolean if a field has been set.
func (o *SwapDetails) HasAmountInFormatted() bool {
	if o != nil && !IsNil(o.AmountInFormatted) {
		return true
	}

	return false
}

// SetAmountInFormatted gets a reference to the given string and assigns it to the AmountInFormatted field.
func (o *SwapDetails) SetAmountInFormatted(v string) {
	o.AmountInFormatted = &v
}

// GetAmountInUsd returns the AmountInUsd field value if set, zero value otherwise.
func (o *SwapDetails) GetAmountInUsd() string {
	if o == nil || IsNil(o.AmountInUsd) {
		var ret string
		return ret
	}
	return *o.AmountInUsd
}

// GetAmountInUsdOk returns a tuple with the AmountInUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetAmountInUsdOk() (*string, bool) {
	if o == nil || IsNil(o.AmountInUsd) {
		return nil, false
	}
	return o.AmountInUsd, true
}

// HasAmountInUsd returns a boolean if a field has been set.
func (o *SwapDetails) HasAmountInUsd() bool {
	if o != nil && !IsNil(o.AmountInUsd) {
		return true
	}

	return false
}

// SetAmountInUsd gets a reference to the given string and assigns it to the AmountInUsd field.
func (o *SwapDetails) SetAmountInUsd(v string) {
	o.AmountInUsd = &v
}

// GetAmountOut returns the AmountOut field value if set, zero value otherwise.
func (o *SwapDetails) GetAmountOut() string {
	if o == nil || IsNil(o.AmountOut) {
		var ret string
		return ret
	}
	return *o.AmountOut
}

// GetAmountOutOk returns a tuple with the AmountOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetAmountOutOk() (*string, bool) {
	if o == nil || IsNil(o.AmountOut) {
		return nil, false
	}
	return o.AmountOut, true
}

// HasAmountOut returns a boolean if a field has been set.
func (o *SwapDetails) HasAmountOut() bool {
	if o != nil && !IsNil(o.AmountOut) {
		return true
	}

	return false
}

// SetAmountOut gets a reference to the given string and assigns it to the AmountOut field.
func (o *SwapDetails) SetAmountOut(v string) {
	o.AmountOut = &v
}

// GetAmountOutFormatted returns the AmountOutFormatted field value if set, zero value otherwise.
func (o *SwapDetails) GetAmountOutFormatted() string {
	if o == nil || IsNil(o.AmountOutFormatted) {
		var ret string
		return ret
	}
	return *o.AmountOutFormatted
}

// GetAmountOutFormattedOk returns a tuple with the AmountOutFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetAmountOutFormattedOk() (*string, bool) {
	if o == nil || IsNil(o.AmountOutFormatted) {
		return nil, false
	}
	return o.AmountOutFormatted, true
}

// HasAmountOutFormatted returns a boolean if a field has been set.
func (o *SwapDetails) HasAmountOutFormatted() bool {
	if o != nil && !IsNil(o.AmountOutFormatted) {
		return true
	}

	return false
}

// SetAmountOutFormatted gets a reference to the given string and assigns it to the AmountOutFormatted field.
func (o *SwapDetails) SetAmountOutFormatted(v string) {
	o.AmountOutFormatted = &v
}

// GetAmountOutUsd returns the AmountOutUsd field value if set, zero value otherwise.
func (o *SwapDetails) GetAmountOutUsd() string {
	if o == nil || IsNil(o.AmountOutUsd) {
		var ret string
		return ret
	}
	return *o.AmountOutUsd
}

// GetAmountOutUsdOk returns a tuple with the AmountOutUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetAmountOutUsdOk() (*string, bool) {
	if o == nil || IsNil(o.AmountOutUsd) {
		return nil, false
	}
	return o.AmountOutUsd, true
}

// HasAmountOutUsd returns a boolean if a field has been set.
func (o *SwapDetails) HasAmountOutUsd() bool {
	if o != nil && !IsNil(o.AmountOutUsd) {
		return true
	}

	return false
}

// SetAmountOutUsd gets a reference to the given string and assigns it to the AmountOutUsd field.
func (o *SwapDetails) SetAmountOutUsd(v string) {
	o.AmountOutUsd = &v
}

// GetSlippage returns the Slippage field value if set, zero value otherwise.
func (o *SwapDetails) GetSlippage() float32 {
	if o == nil || IsNil(o.Slippage) {
		var ret float32
		return ret
	}
	return *o.Slippage
}

// GetSlippageOk returns a tuple with the Slippage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetSlippageOk() (*float32, bool) {
	if o == nil || IsNil(o.Slippage) {
		return nil, false
	}
	return o.Slippage, true
}

// HasSlippage returns a boolean if a field has been set.
func (o *SwapDetails) HasSlippage() bool {
	if o != nil && !IsNil(o.Slippage) {
		return true
	}

	return false
}

// SetSlippage gets a reference to the given float32 and assigns it to the Slippage field.
func (o *SwapDetails) SetSlippage(v float32) {
	o.Slippage = &v
}

// GetOriginChainTxHashes returns the OriginChainTxHashes field value
func (o *SwapDetails) GetOriginChainTxHashes() []TransactionDetails {
	if o == nil {
		var ret []TransactionDetails
		return ret
	}

	return o.OriginChainTxHashes
}

// GetOriginChainTxHashesOk returns a tuple with the OriginChainTxHashes field value
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetOriginChainTxHashesOk() ([]TransactionDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginChainTxHashes, true
}

// SetOriginChainTxHashes sets field value
func (o *SwapDetails) SetOriginChainTxHashes(v []TransactionDetails) {
	o.OriginChainTxHashes = v
}

// GetDestinationChainTxHashes returns the DestinationChainTxHashes field value
func (o *SwapDetails) GetDestinationChainTxHashes() []TransactionDetails {
	if o == nil {
		var ret []TransactionDetails
		return ret
	}

	return o.DestinationChainTxHashes
}

// GetDestinationChainTxHashesOk returns a tuple with the DestinationChainTxHashes field value
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetDestinationChainTxHashesOk() ([]TransactionDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationChainTxHashes, true
}

// SetDestinationChainTxHashes sets field value
func (o *SwapDetails) SetDestinationChainTxHashes(v []TransactionDetails) {
	o.DestinationChainTxHashes = v
}

// GetRefundedAmount returns the RefundedAmount field value if set, zero value otherwise.
func (o *SwapDetails) GetRefundedAmount() string {
	if o == nil || IsNil(o.RefundedAmount) {
		var ret string
		return ret
	}
	return *o.RefundedAmount
}

// GetRefundedAmountOk returns a tuple with the RefundedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetRefundedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RefundedAmount) {
		return nil, false
	}
	return o.RefundedAmount, true
}

// HasRefundedAmount returns a boolean if a field has been set.
func (o *SwapDetails) HasRefundedAmount() bool {
	if o != nil && !IsNil(o.RefundedAmount) {
		return true
	}

	return false
}

// SetRefundedAmount gets a reference to the given string and assigns it to the RefundedAmount field.
func (o *SwapDetails) SetRefundedAmount(v string) {
	o.RefundedAmount = &v
}

// GetRefundedAmountFormatted returns the RefundedAmountFormatted field value if set, zero value otherwise.
func (o *SwapDetails) GetRefundedAmountFormatted() string {
	if o == nil || IsNil(o.RefundedAmountFormatted) {
		var ret string
		return ret
	}
	return *o.RefundedAmountFormatted
}

// GetRefundedAmountFormattedOk returns a tuple with the RefundedAmountFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetRefundedAmountFormattedOk() (*string, bool) {
	if o == nil || IsNil(o.RefundedAmountFormatted) {
		return nil, false
	}
	return o.RefundedAmountFormatted, true
}

// HasRefundedAmountFormatted returns a boolean if a field has been set.
func (o *SwapDetails) HasRefundedAmountFormatted() bool {
	if o != nil && !IsNil(o.RefundedAmountFormatted) {
		return true
	}

	return false
}

// SetRefundedAmountFormatted gets a reference to the given string and assigns it to the RefundedAmountFormatted field.
func (o *SwapDetails) SetRefundedAmountFormatted(v string) {
	o.RefundedAmountFormatted = &v
}

// GetRefundedAmountUsd returns the RefundedAmountUsd field value if set, zero value otherwise.
func (o *SwapDetails) GetRefundedAmountUsd() string {
	if o == nil || IsNil(o.RefundedAmountUsd) {
		var ret string
		return ret
	}
	return *o.RefundedAmountUsd
}

// GetRefundedAmountUsdOk returns a tuple with the RefundedAmountUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDetails) GetRefundedAmountUsdOk() (*string, bool) {
	if o == nil || IsNil(o.RefundedAmountUsd) {
		return nil, false
	}
	return o.RefundedAmountUsd, true
}

// HasRefundedAmountUsd returns a boolean if a field has been set.
func (o *SwapDetails) HasRefundedAmountUsd() bool {
	if o != nil && !IsNil(o.RefundedAmountUsd) {
		return true
	}

	return false
}

// SetRefundedAmountUsd gets a reference to the given string and assigns it to the RefundedAmountUsd field.
func (o *SwapDetails) SetRefundedAmountUsd(v string) {
	o.RefundedAmountUsd = &v
}

func (o SwapDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intentHashes"] = o.IntentHashes
	toSerialize["nearTxHashes"] = o.NearTxHashes
	if !IsNil(o.AmountIn) {
		toSerialize["amountIn"] = o.AmountIn
	}
	if !IsNil(o.AmountInFormatted) {
		toSerialize["amountInFormatted"] = o.AmountInFormatted
	}
	if !IsNil(o.AmountInUsd) {
		toSerialize["amountInUsd"] = o.AmountInUsd
	}
	if !IsNil(o.AmountOut) {
		toSerialize["amountOut"] = o.AmountOut
	}
	if !IsNil(o.AmountOutFormatted) {
		toSerialize["amountOutFormatted"] = o.AmountOutFormatted
	}
	if !IsNil(o.AmountOutUsd) {
		toSerialize["amountOutUsd"] = o.AmountOutUsd
	}
	if !IsNil(o.Slippage) {
		toSerialize["slippage"] = o.Slippage
	}
	toSerialize["originChainTxHashes"] = o.OriginChainTxHashes
	toSerialize["destinationChainTxHashes"] = o.DestinationChainTxHashes
	if !IsNil(o.RefundedAmount) {
		toSerialize["refundedAmount"] = o.RefundedAmount
	}
	if !IsNil(o.RefundedAmountFormatted) {
		toSerialize["refundedAmountFormatted"] = o.RefundedAmountFormatted
	}
	if !IsNil(o.RefundedAmountUsd) {
		toSerialize["refundedAmountUsd"] = o.RefundedAmountUsd
	}
	return toSerialize, nil
}

func (o *SwapDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"intentHashes",
		"nearTxHashes",
		"originChainTxHashes",
		"destinationChainTxHashes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapDetails := _SwapDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapDetails)

	if err != nil {
		return err
	}

	*o = SwapDetails(varSwapDetails)

	return err
}

type NullableSwapDetails struct {
	value *SwapDetails
	isSet bool
}

func (v NullableSwapDetails) Get() *SwapDetails {
	return v.value
}

func (v *NullableSwapDetails) Set(val *SwapDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapDetails(val *SwapDetails) *NullableSwapDetails {
	return &NullableSwapDetails{value: val, isSet: true}
}

func (v NullableSwapDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
