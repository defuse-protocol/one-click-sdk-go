/*
1Click Swap API

API for One-Click Swaps

API version: 0.1.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oneclick

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenResponse{}

// TokenResponse struct for TokenResponse
type TokenResponse struct {
	// Unique asset identifier
	AssetId string `json:"assetId"`
	// Number of decimals for the token
	Decimals float32 `json:"decimals"`
	// Blockchain associated with the token
	Blockchain string `json:"blockchain"`
	// Token symbol (e.g. BTC, ETH)
	Symbol string `json:"symbol"`
	// Current price of the token in USD
	Price float32 `json:"price"`
	// Date when the token price was last updated
	PriceUpdatedAt time.Time `json:"priceUpdatedAt"`
	// Contract address of the token
	ContractAddress *string `json:"contractAddress,omitempty"`
}

type _TokenResponse TokenResponse

// NewTokenResponse instantiates a new TokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenResponse(assetId string, decimals float32, blockchain string, symbol string, price float32, priceUpdatedAt time.Time) *TokenResponse {
	this := TokenResponse{}
	this.AssetId = assetId
	this.Decimals = decimals
	this.Blockchain = blockchain
	this.Symbol = symbol
	this.Price = price
	this.PriceUpdatedAt = priceUpdatedAt
	return &this
}

// NewTokenResponseWithDefaults instantiates a new TokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenResponseWithDefaults() *TokenResponse {
	this := TokenResponse{}
	return &this
}

// GetAssetId returns the AssetId field value
func (o *TokenResponse) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *TokenResponse) SetAssetId(v string) {
	o.AssetId = v
}

// GetDecimals returns the Decimals field value
func (o *TokenResponse) GetDecimals() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetDecimalsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TokenResponse) SetDecimals(v float32) {
	o.Decimals = v
}

// GetBlockchain returns the Blockchain field value
func (o *TokenResponse) GetBlockchain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blockchain
}

// GetBlockchainOk returns a tuple with the Blockchain field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetBlockchainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blockchain, true
}

// SetBlockchain sets field value
func (o *TokenResponse) SetBlockchain(v string) {
	o.Blockchain = v
}

// GetSymbol returns the Symbol field value
func (o *TokenResponse) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TokenResponse) SetSymbol(v string) {
	o.Symbol = v
}

// GetPrice returns the Price field value
func (o *TokenResponse) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *TokenResponse) SetPrice(v float32) {
	o.Price = v
}

// GetPriceUpdatedAt returns the PriceUpdatedAt field value
func (o *TokenResponse) GetPriceUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PriceUpdatedAt
}

// GetPriceUpdatedAtOk returns a tuple with the PriceUpdatedAt field value
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetPriceUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceUpdatedAt, true
}

// SetPriceUpdatedAt sets field value
func (o *TokenResponse) SetPriceUpdatedAt(v time.Time) {
	o.PriceUpdatedAt = v
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *TokenResponse) GetContractAddress() string {
	if o == nil || IsNil(o.ContractAddress) {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetContractAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContractAddress) {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *TokenResponse) HasContractAddress() bool {
	if o != nil && !IsNil(o.ContractAddress) {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *TokenResponse) SetContractAddress(v string) {
	o.ContractAddress = &v
}

func (o TokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assetId"] = o.AssetId
	toSerialize["decimals"] = o.Decimals
	toSerialize["blockchain"] = o.Blockchain
	toSerialize["symbol"] = o.Symbol
	toSerialize["price"] = o.Price
	toSerialize["priceUpdatedAt"] = o.PriceUpdatedAt
	if !IsNil(o.ContractAddress) {
		toSerialize["contractAddress"] = o.ContractAddress
	}
	return toSerialize, nil
}

func (o *TokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetId",
		"decimals",
		"blockchain",
		"symbol",
		"price",
		"priceUpdatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenResponse := _TokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenResponse)

	if err != nil {
		return err
	}

	*o = TokenResponse(varTokenResponse)

	return err
}

type NullableTokenResponse struct {
	value *TokenResponse
	isSet bool
}

func (v NullableTokenResponse) Get() *TokenResponse {
	return v.value
}

func (v *NullableTokenResponse) Set(val *TokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenResponse(val *TokenResponse) *NullableTokenResponse {
	return &NullableTokenResponse{value: val, isSet: true}
}

func (v NullableTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
