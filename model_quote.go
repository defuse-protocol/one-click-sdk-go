/*
1Click Swap API

API for One-Click Swaps

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oneclick

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote struct for Quote
type Quote struct {
	// Deposit address on chain of **originAsset** in case **depositType** is **ORIGIN_CHAIN**.       Deposit address inside near intents in case **depositType** is **INTENTS**.
	DepositAddress *string `json:"depositAddress,omitempty"`
	// Amount of origin asset
	AmountIn string `json:"amountIn"`
	// Amount of origin asset in readable format
	AmountInFormatted string `json:"amountInFormatted"`
	// Amount of origin assets equivalent in USD
	AmountInUsd string `json:"amountInUsd"`
	// Minimum amount of origin asset that will be used for swap
	MinAmountIn string `json:"minAmountIn"`
	// Amount of destination asset
	AmountOut string `json:"amountOut"`
	// Amount of destination asset in readable format
	AmountOutFormatted string `json:"amountOutFormatted"`
	// Amount of destination asset equivalent in USD
	AmountOutUsd string `json:"amountOutUsd"`
	// Minimum amount with slippage taken into account
	MinAmountOut string `json:"minAmountOut"`
	// Time when deposit address will become inactive and funds might be lost
	Deadline *time.Time `json:"deadline,omitempty"`
	// Time when deposit address will become cold and swap processing will take more time
	TimeWhenInactive *time.Time `json:"timeWhenInactive,omitempty"`
	// Estimated time in seconds for swap to be executed after user deposit transaction is confirmed
	TimeEstimate *float32 `json:"timeEstimate,omitempty"`
}

type _Quote Quote

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote(amountIn string, amountInFormatted string, amountInUsd string, minAmountIn string, amountOut string, amountOutFormatted string, amountOutUsd string, minAmountOut string) *Quote {
	this := Quote{}
	this.AmountIn = amountIn
	this.AmountInFormatted = amountInFormatted
	this.AmountInUsd = amountInUsd
	this.MinAmountIn = minAmountIn
	this.AmountOut = amountOut
	this.AmountOutFormatted = amountOutFormatted
	this.AmountOutUsd = amountOutUsd
	this.MinAmountOut = minAmountOut
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	return &this
}

// GetDepositAddress returns the DepositAddress field value if set, zero value otherwise.
func (o *Quote) GetDepositAddress() string {
	if o == nil || IsNil(o.DepositAddress) {
		var ret string
		return ret
	}
	return *o.DepositAddress
}

// GetDepositAddressOk returns a tuple with the DepositAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDepositAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DepositAddress) {
		return nil, false
	}
	return o.DepositAddress, true
}

// HasDepositAddress returns a boolean if a field has been set.
func (o *Quote) HasDepositAddress() bool {
	if o != nil && !IsNil(o.DepositAddress) {
		return true
	}

	return false
}

// SetDepositAddress gets a reference to the given string and assigns it to the DepositAddress field.
func (o *Quote) SetDepositAddress(v string) {
	o.DepositAddress = &v
}

// GetAmountIn returns the AmountIn field value
func (o *Quote) GetAmountIn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountIn
}

// GetAmountInOk returns a tuple with the AmountIn field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountIn, true
}

// SetAmountIn sets field value
func (o *Quote) SetAmountIn(v string) {
	o.AmountIn = v
}

// GetAmountInFormatted returns the AmountInFormatted field value
func (o *Quote) GetAmountInFormatted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountInFormatted
}

// GetAmountInFormattedOk returns a tuple with the AmountInFormatted field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountInFormattedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountInFormatted, true
}

// SetAmountInFormatted sets field value
func (o *Quote) SetAmountInFormatted(v string) {
	o.AmountInFormatted = v
}

// GetAmountInUsd returns the AmountInUsd field value
func (o *Quote) GetAmountInUsd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountInUsd
}

// GetAmountInUsdOk returns a tuple with the AmountInUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountInUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountInUsd, true
}

// SetAmountInUsd sets field value
func (o *Quote) SetAmountInUsd(v string) {
	o.AmountInUsd = v
}

// GetMinAmountIn returns the MinAmountIn field value
func (o *Quote) GetMinAmountIn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinAmountIn
}

// GetMinAmountInOk returns a tuple with the MinAmountIn field value
// and a boolean to check if the value has been set.
func (o *Quote) GetMinAmountInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinAmountIn, true
}

// SetMinAmountIn sets field value
func (o *Quote) SetMinAmountIn(v string) {
	o.MinAmountIn = v
}

// GetAmountOut returns the AmountOut field value
func (o *Quote) GetAmountOut() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountOut
}

// GetAmountOutOk returns a tuple with the AmountOut field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountOutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountOut, true
}

// SetAmountOut sets field value
func (o *Quote) SetAmountOut(v string) {
	o.AmountOut = v
}

// GetAmountOutFormatted returns the AmountOutFormatted field value
func (o *Quote) GetAmountOutFormatted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountOutFormatted
}

// GetAmountOutFormattedOk returns a tuple with the AmountOutFormatted field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountOutFormattedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountOutFormatted, true
}

// SetAmountOutFormatted sets field value
func (o *Quote) SetAmountOutFormatted(v string) {
	o.AmountOutFormatted = v
}

// GetAmountOutUsd returns the AmountOutUsd field value
func (o *Quote) GetAmountOutUsd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountOutUsd
}

// GetAmountOutUsdOk returns a tuple with the AmountOutUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountOutUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountOutUsd, true
}

// SetAmountOutUsd sets field value
func (o *Quote) SetAmountOutUsd(v string) {
	o.AmountOutUsd = v
}

// GetMinAmountOut returns the MinAmountOut field value
func (o *Quote) GetMinAmountOut() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinAmountOut
}

// GetMinAmountOutOk returns a tuple with the MinAmountOut field value
// and a boolean to check if the value has been set.
func (o *Quote) GetMinAmountOutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinAmountOut, true
}

// SetMinAmountOut sets field value
func (o *Quote) SetMinAmountOut(v string) {
	o.MinAmountOut = v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *Quote) GetDeadline() time.Time {
	if o == nil || IsNil(o.Deadline) {
		var ret time.Time
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDeadlineOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *Quote) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given time.Time and assigns it to the Deadline field.
func (o *Quote) SetDeadline(v time.Time) {
	o.Deadline = &v
}

// GetTimeWhenInactive returns the TimeWhenInactive field value if set, zero value otherwise.
func (o *Quote) GetTimeWhenInactive() time.Time {
	if o == nil || IsNil(o.TimeWhenInactive) {
		var ret time.Time
		return ret
	}
	return *o.TimeWhenInactive
}

// GetTimeWhenInactiveOk returns a tuple with the TimeWhenInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTimeWhenInactiveOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeWhenInactive) {
		return nil, false
	}
	return o.TimeWhenInactive, true
}

// HasTimeWhenInactive returns a boolean if a field has been set.
func (o *Quote) HasTimeWhenInactive() bool {
	if o != nil && !IsNil(o.TimeWhenInactive) {
		return true
	}

	return false
}

// SetTimeWhenInactive gets a reference to the given time.Time and assigns it to the TimeWhenInactive field.
func (o *Quote) SetTimeWhenInactive(v time.Time) {
	o.TimeWhenInactive = &v
}

// GetTimeEstimate returns the TimeEstimate field value if set, zero value otherwise.
func (o *Quote) GetTimeEstimate() float32 {
	if o == nil || IsNil(o.TimeEstimate) {
		var ret float32
		return ret
	}
	return *o.TimeEstimate
}

// GetTimeEstimateOk returns a tuple with the TimeEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTimeEstimateOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeEstimate) {
		return nil, false
	}
	return o.TimeEstimate, true
}

// HasTimeEstimate returns a boolean if a field has been set.
func (o *Quote) HasTimeEstimate() bool {
	if o != nil && !IsNil(o.TimeEstimate) {
		return true
	}

	return false
}

// SetTimeEstimate gets a reference to the given float32 and assigns it to the TimeEstimate field.
func (o *Quote) SetTimeEstimate(v float32) {
	o.TimeEstimate = &v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepositAddress) {
		toSerialize["depositAddress"] = o.DepositAddress
	}
	toSerialize["amountIn"] = o.AmountIn
	toSerialize["amountInFormatted"] = o.AmountInFormatted
	toSerialize["amountInUsd"] = o.AmountInUsd
	toSerialize["minAmountIn"] = o.MinAmountIn
	toSerialize["amountOut"] = o.AmountOut
	toSerialize["amountOutFormatted"] = o.AmountOutFormatted
	toSerialize["amountOutUsd"] = o.AmountOutUsd
	toSerialize["minAmountOut"] = o.MinAmountOut
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}
	if !IsNil(o.TimeWhenInactive) {
		toSerialize["timeWhenInactive"] = o.TimeWhenInactive
	}
	if !IsNil(o.TimeEstimate) {
		toSerialize["timeEstimate"] = o.TimeEstimate
	}
	return toSerialize, nil
}

func (o *Quote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amountIn",
		"amountInFormatted",
		"amountInUsd",
		"minAmountIn",
		"amountOut",
		"amountOutFormatted",
		"amountOutUsd",
		"minAmountOut",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuote := _Quote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuote)

	if err != nil {
		return err
	}

	*o = Quote(varQuote)

	return err
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
